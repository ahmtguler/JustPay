/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace LibPayment {
  export type PaymentStruct = {
    paymentId: BigNumberish;
    sender: AddressLike;
    receiver: AddressLike;
    token: AddressLike;
    amount: BigNumberish;
    executor: AddressLike;
    feeToken: AddressLike;
    feeAmount: BigNumberish;
    chainId: BigNumberish;
    deadline: BigNumberish;
    salt: BigNumberish;
  };

  export type PaymentStructOutput = [
    paymentId: bigint,
    sender: string,
    receiver: string,
    token: string,
    amount: bigint,
    executor: string,
    feeToken: string,
    feeAmount: bigint,
    chainId: bigint,
    deadline: bigint,
    salt: bigint
  ] & {
    paymentId: bigint;
    sender: string;
    receiver: string;
    token: string;
    amount: bigint;
    executor: string;
    feeToken: string;
    feeAmount: bigint;
    chainId: bigint;
    deadline: bigint;
    salt: bigint;
  };
}

export interface JustPayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "_verify"
      | "cancelPayment"
      | "eip712Domain"
      | "isCanceled"
      | "isProcessed"
      | "processPayment"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "EIP712DomainChanged"
      | "PaymentCanceled"
      | "PaymentProcessed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "_verify",
    values: [LibPayment.PaymentStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelPayment",
    values: [LibPayment.PaymentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isCanceled",
    values: [LibPayment.PaymentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isProcessed",
    values: [LibPayment.PaymentStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "processPayment",
    values: [LibPayment.PaymentStruct, BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "_verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelPayment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isCanceled", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isProcessed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "processPayment",
    data: BytesLike
  ): Result;
}

export namespace EIP712DomainChangedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentCanceledEvent {
  export type InputTuple = [payment: LibPayment.PaymentStruct];
  export type OutputTuple = [payment: LibPayment.PaymentStructOutput];
  export interface OutputObject {
    payment: LibPayment.PaymentStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentProcessedEvent {
  export type InputTuple = [payment: LibPayment.PaymentStruct];
  export type OutputTuple = [payment: LibPayment.PaymentStructOutput];
  export interface OutputObject {
    payment: LibPayment.PaymentStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface JustPay extends BaseContract {
  connect(runner?: ContractRunner | null): JustPay;
  waitForDeployment(): Promise<this>;

  interface: JustPayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  _verify: TypedContractMethod<
    [_payment: LibPayment.PaymentStruct, _signature: BytesLike],
    [void],
    "view"
  >;

  cancelPayment: TypedContractMethod<
    [_payment: LibPayment.PaymentStruct],
    [void],
    "nonpayable"
  >;

  eip712Domain: TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;

  isCanceled: TypedContractMethod<
    [_payment: LibPayment.PaymentStruct],
    [boolean],
    "view"
  >;

  isProcessed: TypedContractMethod<
    [_payment: LibPayment.PaymentStruct],
    [boolean],
    "view"
  >;

  processPayment: TypedContractMethod<
    [
      _payment: LibPayment.PaymentStruct,
      _signature: BytesLike,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "_verify"
  ): TypedContractMethod<
    [_payment: LibPayment.PaymentStruct, _signature: BytesLike],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelPayment"
  ): TypedContractMethod<
    [_payment: LibPayment.PaymentStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "eip712Domain"
  ): TypedContractMethod<
    [],
    [
      [string, string, string, bigint, string, string, bigint[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: bigint;
        verifyingContract: string;
        salt: string;
        extensions: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "isCanceled"
  ): TypedContractMethod<
    [_payment: LibPayment.PaymentStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isProcessed"
  ): TypedContractMethod<
    [_payment: LibPayment.PaymentStruct],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "processPayment"
  ): TypedContractMethod<
    [
      _payment: LibPayment.PaymentStruct,
      _signature: BytesLike,
      _feeReceiver: AddressLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "EIP712DomainChanged"
  ): TypedContractEvent<
    EIP712DomainChangedEvent.InputTuple,
    EIP712DomainChangedEvent.OutputTuple,
    EIP712DomainChangedEvent.OutputObject
  >;
  getEvent(
    key: "PaymentCanceled"
  ): TypedContractEvent<
    PaymentCanceledEvent.InputTuple,
    PaymentCanceledEvent.OutputTuple,
    PaymentCanceledEvent.OutputObject
  >;
  getEvent(
    key: "PaymentProcessed"
  ): TypedContractEvent<
    PaymentProcessedEvent.InputTuple,
    PaymentProcessedEvent.OutputTuple,
    PaymentProcessedEvent.OutputObject
  >;

  filters: {
    "EIP712DomainChanged()": TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;
    EIP712DomainChanged: TypedContractEvent<
      EIP712DomainChangedEvent.InputTuple,
      EIP712DomainChangedEvent.OutputTuple,
      EIP712DomainChangedEvent.OutputObject
    >;

    "PaymentCanceled(tuple)": TypedContractEvent<
      PaymentCanceledEvent.InputTuple,
      PaymentCanceledEvent.OutputTuple,
      PaymentCanceledEvent.OutputObject
    >;
    PaymentCanceled: TypedContractEvent<
      PaymentCanceledEvent.InputTuple,
      PaymentCanceledEvent.OutputTuple,
      PaymentCanceledEvent.OutputObject
    >;

    "PaymentProcessed(tuple)": TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
    PaymentProcessed: TypedContractEvent<
      PaymentProcessedEvent.InputTuple,
      PaymentProcessedEvent.OutputTuple,
      PaymentProcessedEvent.OutputObject
    >;
  };
}
